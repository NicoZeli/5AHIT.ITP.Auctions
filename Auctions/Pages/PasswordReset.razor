@page "/passwordreset/{Username}/{CodeId}"
@inject ICodeRepository _codeRepository

@if (valid == null) {
    <h2>Loading...</h2>
} else if ((bool)valid) {
    if (success == null) {
        <h2>Password reset for <b>@Username</b>!</h2>
        <EditForm Model=Form OnValidSubmit=Reset>
            <DataAnnotationsValidator />
            <ValidationSummary />
            <input type="password" @bind-value=Form.Password />
            <input type="password" @bind-value=Form.RepeatPassword />
            <button type="submit">Reset</button>
        </EditForm>
    } else {
        if ((bool)success) {
            <h2>Successful password reset for <b>@Username</b>!</h2>
        } else {
            <h2>Something went wrong. Please try again later!</h2>
        }
    }
} else {
    <h2>Link is invalid!</h2>
}

@code {
    [Parameter]
    public string? Username { get; set; }
    [Parameter]
    public string? CodeId { get; set; }

    ResetForm Form { get; set; } = new ResetForm();

    bool? valid;
    bool? success;

    protected async override Task OnInitializedAsync() {
        valid = await _codeRepository.VerifyPasswordReset(Username, CodeId ?? "");
    }

    private async Task Reset() {
        success = await _codeRepository.ResetPassword(Username, CodeId, Form.Password);
    }

    private class ResetForm {
        [NotNull]
        public string Password { get; set; }

        [Compare("Password")]
        [NotNull]
        public string RepeatPassword { get; set; }
    }
}