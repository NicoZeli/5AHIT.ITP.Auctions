@page "/panel/auctions"
@layout AdminLayout
@inject IAuctionRepository _repository

<PageTitle>Auctions</PageTitle>

<div style="width:80%;padding-left:20%" class="wrapper bg-white">
     <div style="width:50%; padding-left:1%">
        <EditForm Model=SearchItem OnValidSubmit=Update class="row">
        <MudTextField @bind-Value=SearchItem.Name Placeholder="Search..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
        <MudButton type="submit" Variant="Variant.Filled">Search</MudButton>
    </EditForm>
    </div>


    @if(Auctions != null && Auctions.Any()) {
        <MudTable Items="@Auctions" FixedHeader="true"  Height="400px" Hover="true">
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh>Title</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
             <RowTemplate >
                <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="Title">@context.Title</MudTd>
                <MudTd DataLabel="Id" @onclick="() => Remove(context)">Action</MudTd>
             </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{50, 100}" />
            </PagerContent>
        </MudTable>
    } else {
        <p>No auctions available.</p>
    }
</div>

@code {
    Search SearchItem { get; set; }
    List<Auction> Auctions { get; set; }

    protected async override Task OnInitializedAsync() {
        SearchItem = new Search();
        await Update();
    }

    private async Task Update() {
        Auctions = await _repository.GetPanelAuctions(SearchItem.Name);
        StateHasChanged();
    }

    private async Task Remove(Auction auction) {
        await _repository.DeleteAsync(auction);
        Auctions.Remove(auction);
    }

    private class Search {
        public string Name { get; set; }
    }
}
