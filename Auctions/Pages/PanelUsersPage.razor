@page "/panel/users"
@layout AdminLayout
@inject IUserRepository _repository

<PageTitle>Users</PageTitle>

<div style="width:80%;padding-left:20%" class="wrapper bg-white">
    <div style="width:50%; padding-left:1%">
        <EditForm Model=SearchItem OnValidSubmit=Update class="row">
        <MudTextField @bind-Value=SearchItem.Name Placeholder="Search..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
        <MudButton type="submit" Variant="Variant.Filled">Search</MudButton>
    </EditForm>
    </div>
    

    @if (Users != null && Users.Any())
    {
        <MudTable Items="@Users" FixedHeader="true" Height="400px" Hover="true">
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh>Username</MudTh>
                <MudTh>Admin</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Id" class="cursor-default">@context.Id</MudTd>
                <MudTd DataLabel="Username" class="cursor-default">@context.Username</MudTd>
                <MudTd DataLabel="Admin" @onclick="() => UpdateAdmin(context)" class="cursor-default">@(context.IsAdmin ? "Admin" : "User")</MudTd>
                <MudTd DataLabel="Action" @onclick="() => Remove(context)" class="cursor-default"><MudIcon Icon="@Icons.Filled.Delete" Color="Color.Default" /></MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{50, 100}" />
            </PagerContent>
        </MudTable>
    }
    else
    {
        <p>No users available.</p>
    }
</div>





@code {

    Search SearchItem { get; set; }
    List<User> Users { get; set; }

    protected async override Task OnInitializedAsync()
    {
        SearchItem = new Search();
        await Update();
    }

    private async Task Update()
    {
        Users = await _repository.GetPanelUsers(SearchItem.Name);
        StateHasChanged();
    }

    private async Task UpdateAdmin(User user)
    {
        user.IsAdmin = !user.IsAdmin;
        await _repository.UpdateAsync(user);
        StateHasChanged();
    }

    private async Task Remove(User user)
    {
        await _repository.DeleteAsync(user);
        Users.Remove(user);
    }

    private class Search
    {
        public string Name { get; set; }
    }
}
