@page "/"
@using Model.Entity
@inject IAuctionRepository _repository

<PageTitle>Home</PageTitle>

@if (Search != null) {
    <div class="container">
        <EditForm Model=Search OnValidSubmit=ExecuteSearch>
            <div id="header" class="bg-white rounded d-flex align-items-center justify-content-between">
                <button class="btn btn-hide text-uppercase" type="button" data-toggle="collapse" data-target="#filterbar" aria-expanded="false" aria-controls="filterbar" id="filter-btn"> <span class="fas fa-angle-left" id="filter-angle"></span> <span id="btn-txt">Hide filters</span> </button>
                <input class="w-100 h-100 h3 px-2" @bind-value=Search.Name />
                <button class="btn btn-hide text-uppercase" type="submit"><span>Search</span></button>
            </div>
            <div id="content" class="my-5">
                <div id="filterbar" class="collapse position-absolute">
                    <div class="box border-bottom">
                        <div class="box-label text-uppercase d-flex align-items-center ">Categories </div>
                        <div class="box border-bottom"></div>
                        <div id="inner-box">
                            @if (Search.Categories != null && Search.Categories.Any()) {
                                @foreach (Categorie category in Search.Categories.Keys) {
                                    <div class="my-1"> <label class="tick">@category.Label <input type="checkbox" @bind-value=Search.Categories[category]> <span class="check"></span> </label> </div>
                                }
                            } else {
                                <p>No categories available!</p>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
}

<div class="container">
    @if (Filtered != null && Filtered.Any()) {
        @foreach (Auction auction in Filtered) {
            <p>@auction.Title</p>
        }
        @if (AddResults) {
            <div class="bg-white rounded d-flex align-items-center justify-content-center">
                <button class="btn btn-hide text-uppercase" type="button" @onclick=ExecuteAddResults><span>More</span></button>
            </div>
        }
    } else {
        <p>No Auctions found!</p>
    }
</div>

@code {
    [CascadingParameter] public User Account { get; set; }

    private SearchObject Search { get; set; }

    private List<Auction> Filtered { get; set; }

    private bool AddResults { get; set; } = true;

    protected async override Task OnInitializedAsync() {
        AddResults = true;
        Search = new SearchObject();
        Search.Categories = (await _repository.GetCategories()).ToDictionary(o => o, o => false);
        await ExecuteSearch();
    }

    private async Task ExecuteSearch() {
        AddResults = true;
        Filtered = await _repository.Filter(Search.Name, Search.Categories.Where(o => o.Value).Select(o => o.Key).ToList(), null);
    }

    private async Task ExecuteAddResults() {
        int filteredCount = Filtered.Count();
        Filtered.AddRange(await _repository.Filter(Search.Name, Search.Categories.Where(o => o.Value).Select(o => o.Key).ToList(), Filtered.Last()));
        if (Filtered.Count() == filteredCount) AddResults = false;
    }

    class SearchObject {
        public string Name { get; set; }
        public Dictionary<Categorie, bool> Categories { get; set; }
    }
}