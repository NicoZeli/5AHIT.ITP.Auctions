@using EFCAT.Model.Data
@inject IAuctionRepository _repository

<div id="collapseOne" class="collapse show" aria-labelledby="headingOne" data-parent="#accordion">
    <div class="card-body">

        <div class="wrapper bg-white" style="max-width:700px; margin: 0 auto">
            <div class="d-flex align-items-start py-3 border-bottom">
                <div class="pl-sm-4 pl-2" id="img-section">
                    <b>Product Photos</b>
                    <p>Accepted file type .png</p>
                    <button type="button" class="btn button border" onclick="document.getElementById('selectFile').click();"><b>Upload</b></button>
                    <InputFile OnChange=InputImage id="selectFile" style="display:none" />
                </div>
            </div>
            
                @if (Auction.Images != null && Auction.Images.Any()) {
                    <div>
                        <MudItem Style="width:100%; height:500px; padding-top: 20px; padding-bottom:60px; " >
                             <MudCarousel Class="mud-width-full" ItemsSource="@Auction.Images.ToList()" @bind-SelectedIndex="selectedIndex"  AutoCycle="false" TData="AuctionImage" Style="height:100%; width:100%;">
                                <ItemTemplate>
                                    <MudCardMedia Image="@(context.Image.GetImageSource())" Size="@Size.Large" Style="width:100%; height:100%;background-size:contain;"/>
	                            </ItemTemplate>
                            </MudCarousel>
                       </MudItem>
                       <div class="py-3 pb-4 border-bottom"> <button type="button" class="btn btn-primary mr-3" @onclick="DeleteAsync">Delete Current Picture</button> </div>

                    </div>
                } else {
                    <p>No images uploaded!</p>
                }
            
            <div>
                 <div class="py-2">
                    <div class="row py-2">
                        <div class="col-md-12"> <label>Productname</label> <input type="text" class="bg-light form-control" @bind-value=Auction.Title> </div>
                    </div>
                    <div class="row py-2">
                        <div class="col-md-12"> <label>Description</label> <textarea type="text" class="bg-light form-control" @bind=Auction.Description /> </div>
                    </div>
                    <div class="row py-2">
                        <div class="col-md-12"> <label>End Date</label> <input type="date" class="bg-light form-control" @bind=Auction.EndDate> </div>
                    </div>

                     <div class="row py-2">
                        <div class="col-md-12"> <label>Categories</label>  </div>
                    </div>
                    @if (Categories != null && Categories.Any())
                    {
                        <div class="row py-2">
                            @foreach (Categorie c in Categories.Select(o => o.Key))
                            {
                                <MudCheckBox @bind-Checked="Categories[c]" @oninput="(e) => CategoryChange(c, e)">@c.Label</MudCheckBox>
                            }
                        </div>
                    }
                    <div class="py-2">

                    <InputSelect class="dropdown-select" @bind-Value="Auction.DeliveryType">
                         @foreach (Enum type in Enum.GetValues(typeof(EDeliveryType)))
                        {
                            <option value=@type>@type</option>
                        }
                    </InputSelect>
                    </div>
                    <div class="py-2">
                        

                        @if (Auction is BiddingAuction ba)
                        {
                            <div class="row py-2">
                                <div class="col-md-12"> <label>Starting Bid </label> <input type="number" class="bg-light form-control" placeholder="0" @bind-value=ba.StartingPrice> </div>
                            </div>
                            <div class="row py-2">
                                <div class="col-md-12"> <label>Bid Step</label> <input type="number" class="bg-light form-control" placeholder="0" @bind-value=ba.Step> </div>
                            </div>
                            <div class="row py-2">
                                <div class="col-md-12"> <label>Instant Buy Price</label> <input type="number" class="bg-light form-control" placeholder="0" @bind-value=ba.InstantBuyPrice> </div>
                            </div>
                        }
                        else if (Auction is BuyAuction baa)
                        {
                            <div class="row py-2">
                                <div class="col-md-12"> <label>Buy Price</label> <input type="number" class="bg-light form-control" placeholder="0" @bind-value=baa.MinimumPrice> </div>
                            </div>
                        }
                    </div>




                    <div class="py-3 pb-4 border-bottom"> <button type="submit" class="btn btn-primary mr-3">Create Auction</button> </div>

                </div>
            </div>
               
        </div>

    </div>
</div>

<style>
    .dropdown-select{
  width: 100%;
  padding: 6px 12px;
  border: 1px solid #ced4da;
  background-color: #f8f9fa;
  border-radius: 4px;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  color: #495057;
    }

    </style>

@code {
    [Parameter] public Auction Auction { get; set; }

    private int selectedIndex = 0;

    public Dictionary<Categorie, bool> Categories { get; set; }


    protected async override Task OnInitializedAsync()
    {
        List<Categorie> categories = await _repository.GetCategories();
        List<Categorie> auctionCategories = Auction.Categories.Select(o => o.Categorie).ToList();
        Categories = categories.ToDictionary(o => o, o => auctionCategories.Contains(o));
    }

    void CategoryChange(Categorie c, ChangeEventArgs e)
    {
        if (Auction.Categories == null) Auction.Categories = new List<AuctionCategorie>();
        if ((bool)e.Value) Auction.Categories.Add(new AuctionCategorie() { Categorie = c });
        else Auction.Categories.Remove(Auction.Categories.FirstOrDefault(o => o.Categorie == c));
    }

    private async Task InputImage(InputFileChangeEventArgs e)
    {
        if (Auction.Images == null)
            Auction.Images = new List<AuctionImage>();
        try
        {
            if (e.FileCount > 0)
            {
                foreach (IBrowserFile file in e.GetMultipleFiles(1))
                {
                    Image image = new Image();
                    await image.Set(file.OpenReadStream(5242880), file.ContentType);
                    Auction.Images.Add(new AuctionImage() { Image = image });
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        this.StateHasChanged();
    }

    private async Task DeleteAsync(){
        AuctionImage ai = Auction.Images.ToList()[selectedIndex];
        Console.WriteLine(selectedIndex);
        selectedIndex = ai == Auction.Images.First() ? 0 : selectedIndex - 1;
        Console.WriteLine(selectedIndex);
        Auction.Images.Remove(ai);
        this.StateHasChanged();
    }
}